#!/usr/bin/env python
"""
    %prog [options] config_file meds_file out_file

Process the input meds file.
"""

import os,sys
from sys import stderr
import numpy
import yaml
import fitsio
import gmix_meds
import pprint

from optparse import OptionParser
parser = OptionParser(__doc__)

parser.add_option("--obj-range",default=None,
                  help=("Inclusive, zero-offset range of objects to "
                        "process"))
parser.add_option("--det-cat", default=None,
                  help="detection cat for matched fluxes")

def load_config(fname):
    with open(fname) as fobj:
        data=yaml.load(fobj)
    return data

def makedir_fromfile(fname):
    dname=os.path.dirname(fname)
    if not os.path.exists(dname):
        try:
            os.makedirs(dname)
        except:
            # probably a race condition
            pass

def make_lm_meta(conf, meds_meta, meds_file):

    dt = meds_meta.dtype.descr

    config_file=conf['config_file']

    clen=len(config_file)
    flen=len(meds_file)
    mlen=len(conf['psf_model'])
    rlen=len(conf['region'])

    dt += [('gmix_meds_config','S%d' % clen),
           ('meds_file','S%d' % flen),
           ('psf_ntry','i2'),
           ('obj_ntry','i2'),
           ('psf_model','S%d' % mlen),
           ('psf_offset_max','f8'),
           ('region','S%d' % rlen)]

    meta=numpy.zeros(1, dtype=dt)
    for n in meds_meta.dtype.names:
        meta[n] = meds_meta[n]

    meta['gmix_meds_config'] = config_file
    meta['meds_file'] = meds_file
    meta['psf_ntry'] = conf['psf_ntry']
    meta['obj_ntry'] = conf['obj_ntry']
    meta['psf_model'] = conf['psf_model']
    meta['psf_offset_max'] = conf['psf_offset_max']
    meta['region'] = conf['region']

    return meta

def make_mcmc_meta(conf, meds_meta, meds_file):

    dt = meds_meta.dtype.descr

    config_file=conf['config_file']
    clen=len(config_file)
    flen=len(meds_file)
    mlen=len(conf['psf_model'])
    rlen=len(conf['region'])

    gtlen = len(conf['gprior_type'])

    dt += [('gmix_meds_config','S%d' % clen),
           ('meds_file','S%d' % flen),
           ('psf_ntry','i2'),

           ('nwalkers','i2'),
           ('burnin','i2'),
           ('nstep','i2'),
           ('mca_a','f8'),

           ('do_pqr','i2'),

           ('psf_model','S%d' % mlen),

           ('gprior_type','S%d' % gtlen),

           ('psf_offset_max','f8'),
           ('region','S%d' % rlen)]

    meta=numpy.zeros(1, dtype=dt)
    for n in meds_meta.dtype.names:
        meta[n] = meds_meta[n]

    meta['gmix_meds_config'] = config_file
    meta['meds_file'] = meds_file

    meta['psf_ntry'] = conf['psf_ntry']

    meta['nwalkers'] = conf['nwalkers']
    meta['burnin'] = conf['burnin']
    meta['nstep'] = conf['nstep']
    meta['mca_a'] = conf['mca_a']

    if conf['do_pqr']:
        meta['do_pqr']=1
    else:
        meta['do_pqr']=0

    meta['gprior_type'] = conf['gprior_type']

    meta['psf_model'] = conf['psf_model']
    meta['psf_offset_max'] = conf['psf_offset_max']
    meta['region'] = conf['region']

    return meta


def run_lm(meds_file, conf):
    gprior=get_gprior(conf)
    conf['gprior'] = gprior

    gm=gmix_meds.MedsFit(meds_file, **conf)
    gm.do_fits()

    data=gm.get_data()
    meds_meta=gm.get_meds_meta()
    meta=make_lm_meta(conf, meds_meta, meds_file)

    return data, meta

def get_gprior(conf):
    import gmix_image
    gprior_type=conf.get('gprior_type',None)

    if gprior_type is None:
        return None
    elif gprior_type =='flat':
        return gmix_image.priors.GPriorFlat()
    elif gprior_type=='exp':
        pars=conf['gprior_pars']
        return gmix_image.priors.GPriorExp(pars)
    else:
        raise ValueError("implement gprior '%s'")

def run_mcmc(meds_file, conf):
    gprior=get_gprior(conf)

    gm=gmix_meds.MedsMCMC(meds_file, gprior, **conf)
    gm.do_fits()

    data=gm.get_data()
    meds_meta=gm.get_meds_meta()
    meta=make_mcmc_meta(conf, meds_meta, meds_file)

    return data, meta



def main():
    options, args = parser.parse_args(sys.argv[1:])
    if len(args) < 3:
        parser.print_help()
        sys.exit(45)

    config_file=args[0]
    meds_file=args[1]
    out_file=args[2]

    conf=load_config(config_file)
    pprint.pprint(conf,stream=stderr)

    rng=options.obj_range
    if rng is not None:
        rng=rng.split(',')
        rng = [int(i) for i in rng]


    det_cat_file=options.det_cat
    if det_cat_file is not None and det_cat_file != "":
        print >>stderr,'reading:',det_cat_file
        det_cat=fitsio.read(det_cat_file)
    else:
        det_cat=None

    conf['obj_range'] = rng
    conf['det_cat'] = det_cat
    conf['config_file']=config_file

    if conf['fitter'] == 'lm':
        data, meta = run_lm(meds_file, conf)
    else:
        data, meta = run_mcmc(meds_file, conf)

    makedir_fromfile(out_file)
    print 'writing:',out_file
    with fitsio.FITS(out_file,'rw',clobber=True) as fobj:
        fobj.write(data,extname="model_fits")
        fobj.write(meta,extname="meta_data")

main()
