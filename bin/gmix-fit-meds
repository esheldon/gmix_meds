#!/usr/bin/env python
"""
    %prog [options] config_file meds_file out_file

Process the input meds file.
"""

import os,sys
from sys import stderr
import numpy
import yaml
import fitsio
import gmix_meds
import pprint

from optparse import OptionParser
parser = OptionParser(__doc__)

parser.add_option("--obj-range",default=None,
                  help=("Inclusive, zero-offset range of objects to "
                        "process"))
parser.add_option("--det-cat", default=None,
                  help="detection cat for matched fluxes")
parser.add_option("--seed", default=None,
                  help="A seed for random numbers")

def load_config(fname):
    with open(fname) as fobj:
        data=yaml.load(fobj)
    return data

def makedir_fromfile(fname):
    dname=os.path.dirname(fname)
    if not os.path.exists(dname):
        try:
            os.makedirs(dname)
        except:
            # probably a race condition
            pass

def make_meta(conf, meds_meta, meds_file, config_file):

    dt = meds_meta.dtype.descr

    clen=len(config_file)
    flen=len(meds_file)
    mlen=len(conf['psf_model'])

    dt += [('gmix_meds_config','S%d' % clen),
           ('meds_file','S%d' % flen),
           ('psf_ntry','i2'),
           ('obj_ntry','i2'),
           ('psf_model','S%d' % mlen),
           ('reject_outliers','i2'),
           ('pix_nsig','f8')]

    meta=numpy.zeros(1, dtype=dt)
    for n in meds_meta.dtype.names:
        meta[n] = meds_meta[n]

    meta['gmix_meds_config'] = config_file
    meta['meds_file'] = config_file
    meta['psf_ntry'] = conf['psf_ntry']
    meta['obj_ntry'] = conf['obj_ntry']
    meta['psf_model'] = conf['psf_model']
    
    if conf['reject_outliers']:
        meta['reject_outliers'] = 1
    else:
        meta['reject_outliers'] = 0

    meta['pix_nsig'] = conf['pix_nsig']

    return meta

def main():
    options, args = parser.parse_args(sys.argv[1:])
    if len(args) < 3:
        parser.print_help()
        sys.exit(45)

    config_file=args[0]
    meds_file=args[1]
    out_file=args[2]

    conf=load_config(config_file)
    pprint.pprint(conf,stream=stderr)

    seed=options.seed
    if seed is not None:
        seed=int(seed)
    rng=options.obj_range
    if rng is not None:
        rng=rng.split(',')
        rng = [int(i) for i in rng]

    det_cat_file=options.det_cat
    if det_cat_file is not None and det_cat_file != "":
        print >>stderr,'reading:',det_cat_file
        det_cat=fitsio.read(det_cat_file)
    else:
        det_cat=None

    gm=gmix_meds.MedsFit(meds_file,
                         obj_range=rng,
                         seed=seed,
                         psf_model=conf['psf_model'],
                         psf_ntry=conf['psf_ntry'],
                         obj_ntry=conf['obj_ntry'],
                         reject_outliers=conf['reject_outliers'],
                         pix_nsig=conf['pix_nsig'],
                         det_cat=det_cat)
    gm.do_fits()

    data=gm.get_data()
    meds_meta=gm.get_meds_meta()
    meta=make_meta(conf, meds_meta, meds_file, config_file)

    makedir_fromfile(out_file)
    print 'writing:',out_file
    with fitsio.FITS(out_file,'rw',clobber=True) as fobj:
        fobj.write(data,extname="model_fits")
        fobj.write(meta,extname="meta_data")

main()
