#!/usr/bin/env python
"""
    %prog [options] config_file out_file meds_file1 meds_files2 ...

Process the input meds file.
"""
from __future__ import print_function
import os,sys
import shutil
import numpy
import yaml
import fitsio
import meds
import gmix_meds
from gmix_meds import files
import pprint

#import esutil as eu

from optparse import OptionParser
parser = OptionParser(__doc__)

parser.add_option("--obj-range",default=None,
                  help=("Inclusive, zero-offset range of objects to "
                        "process"))
parser.add_option("--work-dir", default=None,
                  help=("copy files local for processing.  "
                        "Also write to local files and copy out."
                        "The local files are not removed."))

parser.add_option("--profile", action='store_true',
                  help=("Profile the code"))

parser.add_option("--make-plots", action='store_true',
                  help=("make some plots"))

parser.add_option("--model-file", default=None,
                  help=("model fits to use for modeling the neighbors of each object"))

parser.add_option("--model-extra-info", default=None,
                  help=("extra info for neighbors modelling"))


def make_ngmix_meta(conf, meds_meta_list, meds_files):

    dt = meds_meta_list[0].dtype.descr

    config_file=conf['config_file']

    clen=len(config_file)
    flen=max( [len(mf) for mf in meds_files] )


    dt += [('gmix_meds_config','S%d' % clen),
           ('meds_file','S%d' % flen)]

    nband=len(meds_meta_list)
    meta=numpy.zeros(nband, dtype=dt)

    #mlist=[]
    for band in xrange(nband):

        #meta=numpy.zeros(1, dtype=dt)
        meds_file=meds_files[band]
        meds_meta=meds_meta_list[band]
        mf=meds_files[band]

        mnames=meta.dtype.names
        for name in meds_meta.dtype.names:
            if name in mnames:
                meta[name][band] = meds_meta[name][0]

        #eu.numpy_util.copy_fields(meds_meta, meta)

        meta['gmix_meds_config'][band] = config_file
        meta['meds_file'][band] = meds_file

        #mlist.append(meta)

    #meta=eu.numpy_util.combine_arrlist(mlist)
    return meta



def run_ngmix(meds_files,
              meds_files_full,
              conf,
              obj_range=None,
              model_data=None,
              checkpoint_file=None,
              checkpoint_data=None):
    import ngmix
    
    priors={}

    if 'joint_prior' in conf:
        import great3
        cen_width=conf['cen_width']
        with_TF_bounds=False
        priors['joint_prior']=great3.joint_prior.make_joint_prior_simple(conf['joint_prior'],
                                                                         cen_width,
                                                                         g_prior_during=True,
                                                                         with_TF_bounds=with_TF_bounds)
        priors['joint_prior_gflat']=great3.joint_prior.make_joint_prior_simple(conf['joint_prior'],
                                                                               cen_width,
                                                                               g_prior_during=False,
                                                                               with_TF_bounds=with_TF_bounds)
    else:
        priors['g_priors'] = get_g_priors_ngmix(conf)
        priors['cen_prior'] = get_cen_prior_ngmix(conf)
        priors['T_priors'] = get_T_priors_ngmix(conf)
        priors['counts_priors'] = get_counts_priors_ngmix(conf)

    cmguess=conf.get('coadd_model_guess',None)
    meguess=conf.get('me_model_guess',None)
    if conf['fitter_class']=='mh':
        if cmguess == 'iter' or meguess == "iter":
            meds_fitter=gmix_meds.nfititer.MHMedsFitHybridIter
        elif model_data is not None:
            meds_fitter=gmix_meds.nfitnbrs.MHMedsFitModelNbrs
        else:
            meds_fitter=gmix_meds.nfit.MHMedsFitHybrid
    elif conf['fitter_class']=='emcee':
        if cmguess == 'iter' or meguess == "iter":
            meds_fitter=gmix_meds.nfititer.MedsFitEmceeIter
        else:
            meds_fitter=gmix_meds.nfit.MedsFit
    elif conf['fitter_class']=='emcee-only':
        meds_fitter=gmix_meds.nfit.MedsFitEmceeOnly
    elif conf['fitter_class']=="coadd-only":
        meds_fitter=gmix_meds.nfitcoadd.MedsFitCoadd
    else:
        raise ValueError("bad fitter class: '%s'" % conf['fitter_class'])

    gm=meds_fitter(conf,
                   priors,
                   meds_files,
                   obj_range=obj_range,
                   model_data=model_data,
                   checkpoint_file=checkpoint_file,
                   checkpoint_data=checkpoint_data)
    gm.do_fits()
    data=gm.get_data()
    epoch_data=gm.get_epoch_data()
    meds_meta=gm.get_meds_meta_list()


    meta=make_ngmix_meta(conf, meds_meta, meds_files_full)

    return data, epoch_data, meta

def get_T_priors_ngmix(conf):
    import ngmix

    T_prior_types=conf['T_prior_types']

    T_priors=[]
    for i,typ in enumerate(T_prior_types):
        if typ == 'flat':
            pars=conf['T_prior_pars'][i]
            T_prior=ngmix.priors.FlatPrior(pars[0], pars[1])

        elif typ=='TwoSidedErf':
            pars=conf['T_prior_pars'][i]
            T_prior=ngmix.priors.TwoSidedErf(*pars)

        elif typ =='lognormal':
            pars=conf['T_prior_pars'][i]
            T_prior=ngmix.priors.LogNormal(pars[0], pars[1])
        elif typ=="cosmos_exp":
            T_prior=ngmix.priors.TPriorCosmosExp()
        elif typ=="cosmos_dev":
            T_prior=ngmix.priors.TPriorCosmosDev()
        else:
            raise ValueError("bad T prior type: %s" % T_prior_type)

        T_priors.append(T_prior)

    return T_priors

def get_counts_priors_ngmix(conf):
    import ngmix

    counts_prior_types=conf['counts_prior_types']

    counts_priors=[]
    for i,typ in enumerate(counts_prior_types):
        if typ == 'flat':
            pars=conf['counts_prior_pars'][i]
            counts_prior=ngmix.priors.FlatPrior(pars[0], pars[1])

        elif typ=='TwoSidedErf':
            pars=conf['counts_prior_pars'][i]
            counts_prior=ngmix.priors.TwoSidedErf(*pars)


        else:
            raise ValueError("bad counts prior type: %s" % counts_prior_type)

        counts_priors.append(counts_prior)

    return counts_priors


def get_g_priors_ngmix(conf):
    import ngmix
    g_prior_types=conf['g_prior_types']

    g_priors=[]
    for i,typ in enumerate(g_prior_types):
        if typ =='exp':
            pars=conf['g_prior_pars'][i]
            parr=numpy.array(pars,dtype='f8')
            g_prior = ngmix.priors.GPriorM(parr)
        elif typ=='cosmos-sersic':
            g_prior = ngmix.priors.make_gprior_cosmos_sersic(type='erf')
        elif typ=='cosmos-exp':
            g_prior = ngmix.priors.make_gprior_cosmos_exp()
        elif typ=='cosmos-dev':
            g_prior = ngmix.priors.make_gprior_cosmos_dev()
        elif typ =='ba':
            sigma=conf['g_prior_pars'][i]
            g_prior = ngmix.priors.GPriorBA(sigma)
        elif typ=='flat':
            g_prior=ngmix.priors.ZDisk2D(1.0)
        else:
            raise ValueError("implement gprior '%s'")
        g_priors.append(g_prior)

    return g_priors

def get_cen_prior_ngmix(conf):
    import ngmix
    use_cen_prior=conf.get('use_cen_prior',False)
    if use_cen_prior:
        width=conf.get('cen_width',1.0)
        return ngmix.priors.CenPrior(0.0, 0.0, width,width)
    else:
        return None


def get_sub_fname(fname, rng, work_dir):
    rng_string = '%s-%s' % (rng[0], rng[1])

    bname = os.path.basename(fname)

    bname = bname.replace('.fits.fz','').replace('.fits','')
    bname = '%s-%s.fits' % (bname, rng_string)

    newf = os.path.join(work_dir, bname)

    return newf

def get_sub(meds_files, rng, work_dir):
    """
    Local files will get cleaned up
    """
    extracted=[]

    for f in meds_files:

        print(f)
        newf = get_sub_fname(f, rng, work_dir)
        ex=meds.MEDSExtractor(f, rng[0], rng[1], newf, cleanup=True)
        extracted.append(ex)

    return extracted

def get_range(rng_string):
    if rng_string is not None:
        rng = rng_string.split(',')
        rng = [int(i) for i in rng]
    else:
        rng=None

    return rng

def go_profile(config_file, meds_files, out_file, options):
    import cProfile
    import pstats

    print("doing profile")

    cProfile.runctx('go(config_file, meds_files, out_file, options)',
                    globals(),locals(),
                    'profile_stats')

    p = pstats.Stats('profile_stats')
    p.sort_stats('time').print_stats()


def cleanup_checkpoint(checkpoint_file):
    """
    if we get this far, we have succeeded in writing the data. We can remove
    the checkpoint file
    """
    if os.path.exists(checkpoint_file):
        print('removing checkpoint file',checkpoint_file)
        os.remove(checkpoint_file)


def get_checkpoint_data(out_file):
    """
    See if the code was checkpointed in a previous run
    """
    checkpoint_file=out_file.replace('.fits','-checkpoint.fits')
    data=None

    if os.path.exists(checkpoint_file):
        data={}
        print('reading checkpoint data:',checkpoint_file)
        with fitsio.FITS(checkpoint_file) as fobj:
            data['data']=fobj['model_fits'][:]
            if 'epoch_data'in fobj:
                data['epoch_data']=fobj['epoch_data'][:]

    return checkpoint_file, data

def run_fitter(meds_files,
               meds_files_full,
               conf,
               obj_range=None,
               model_data=None,
               checkpoint_file=None,
               checkpoint_data=None):
    """
    Run one of a few types of fitters.  Only ngmix is maintained currently
    """
    epoch_data=None
    if conf['fitter'] == 'ngmix':
        data, epoch_data, meta = run_ngmix(meds_files,
                                           meds_files_full,
                                           conf,
                                           obj_range=obj_range,
                                           model_data=model_data,
                                           checkpoint_file=checkpoint_file,
                                           checkpoint_data=checkpoint_data)
    else:
        raise ValueError("bad fitter: '%s'" % conf['fitter'])

    return data, epoch_data, meta

def setup_work_files(options, meds_files):
    """
    Set up local, possibly sub-range meds files
    """
    meds_files_full=meds_files
    extracted=None
    rng=get_range( options.obj_range )
    rng_send=None
    if rng is not None:
        if options.work_dir is not None:
            # note variable extracted is cleaned up when MedsExtractors get
            # garbage collected
            extracted=get_sub(meds_files, rng, options.work_dir)
            meds_files_full=meds_files
            meds_files=[ex.sub_file for ex in extracted]
            rng_send=None
        else:
            rng_send=rng
    return rng_send, meds_files, meds_files_full, extracted

 
def write_data(data, epoch_data, meta, out_file, work_dir=None):
    """
    write the actual data.  clobber existing
    """
    from gmix_meds.files import StagedOutFile

    if work_dir is None:
        work_dir=os.environ.get('TMPDIR','/tmp')

    with StagedOutFile(out_file, tmpdir=work_dir) as sf:
        print('writing:',sf.path)
        with fitsio.FITS(sf.path,'rw',clobber=True) as fobj:

            fobj.write(data,extname="model_fits")

            if epoch_data is not None:
                fobj.write(epoch_data,extname="epoch_data")

            fobj.write(meta,extname="meta_data")


def go(config_file, meds_files, out_file, options):

    checkpoint_file, checkpoint_data=get_checkpoint_data(out_file)

    conf=files.read_yaml(config_file)

    if options.work_dir is not None:
        conf['work_dir']=options.work_dir
    
    conf['make_plots'] = options.make_plots

    pprint.pprint(conf)

    rng_send,meds_files,meds_files_full,extracted=\
                        setup_work_files(options,meds_files)

    # if work_dir is sent, we do range by extracting it, see above, so
    # rng_send would be None

    conf['config_file']=config_file

    if options.model_file is not None:
        with fitsio.FITS(options.model_file) as fits:
            model_data={}
            model_data['model_fits']=fits['model_fits'][:]
            model_data['epochs']=fits['epoch_data'][:]
            object_data=[]
            for mf in meds_files_full:
                data=fitsio.read(mf,ext='object_data')
                object_data.append(data)
            model_data['meds_object_data']=object_data
    else:
        model_data=None

    if options.model_extra_info is not None:
        assert model_data is not None,"You cannot use --model-extra-info without --model-data!"
        model_data['model_extra_info'] = fitsio.read(options.model_extra_info)

    data, epoch_data, meta=run_fitter(meds_files,
                                      meds_files_full,
                                      conf, 
                                      obj_range=rng_send,
                                      model_data=model_data,
                                      checkpoint_file=checkpoint_file,
                                      checkpoint_data=checkpoint_data)

    if options.work_dir is not None:
        meta['meds_file'] = meds_files_full

    write_data(data, epoch_data, meta, out_file, work_dir=options.work_dir)

    cleanup_checkpoint(checkpoint_file)
  
    
def main():
    options, args = parser.parse_args(sys.argv[1:])
    if len(args) < 3:
        parser.print_help()
        sys.exit(45)

    config_file=args[0]
    out_file=args[1]
    meds_files=args[2:]

    if options.profile:
        go_profile(config_file, meds_files, out_file, options)
    else:
        go(config_file, meds_files, out_file, options)

main()
